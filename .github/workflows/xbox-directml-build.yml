name: Xbox DirectML App Build

on:
  push:
    branches: [ main ]
    paths:
      - 'XboxMLApp/**'
      - '.github/workflows/xbox-directml-build.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual execution from GitHub portal

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Add Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
      with:
        sdk-version: 19041
      
    - name: Restore NuGet packages
      run: |
        dotnet restore XboxMLApp/XboxMLApp.csproj
      
    - name: Ensure Models directory exists
      run: |
        if (-Not (Test-Path -Path "XboxMLApp/Models/resnet18.dml")) {
          Write-Host "Creating placeholder model file"
          New-Item -ItemType Directory -Force -Path "XboxMLApp/Models" | Out-Null
          "Placeholder for resnet18.dml model file" | Out-File -FilePath "XboxMLApp/Models/resnet18.dml"
        }
      
    - name: Build UWP App with MSIX packaging
      run: |
        # Build with appropriate settings for MSIX packaging
        msbuild XboxMLApp/XboxMLApp.csproj `
          /p:Configuration=Release `
          /p:Platform=ARM64 `
          /p:AppxPackageSigningEnabled=false `
          /p:AppxBundlePlatforms="ARM64" `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxBundle=Always `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /t:Clean,Rebuild
        
        # Try explicit AppxPackage target as a separate step
        Write-Host "Attempting to generate MSIX package explicitly..."
        msbuild XboxMLApp/XboxMLApp.csproj `
          /p:Configuration=Release `
          /p:Platform=ARM64 `
          /p:AppxPackageSigningEnabled=false `
          /p:GenerateAppxPackageOnBuild=true `
          /t:Publish
      
    - name: Check build output
      run: |
        # List bin directory to see what was created
        Write-Host "=== Checking bin directory structure ==="
        Get-ChildItem -Path XboxMLApp/bin -Recurse | Select-Object -First 30 | Format-Table FullName
        
        # Check all possible MSIX file locations
        $possibleLocations = @(
          "XboxMLApp/bin/ARM64/Release/net6.0-windows10.0.19041.0/win10-arm64/AppPackages",
          "XboxMLApp/bin/ARM64/Release/AppPackages",
          "XboxMLApp/AppPackages",
          "XboxMLApp/bin/ARM64/Release"
        )
        
        foreach ($loc in $possibleLocations) {
          if (Test-Path $loc) {
            Write-Host "Contents of $($loc):"
            Get-ChildItem -Path $loc -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          }
        }
        
        # Search for MSIX files
        Write-Host "=== Searching for MSIX/APPX files ==="
        $msixFiles = Get-ChildItem -Path XboxMLApp -Recurse -Include *.msix, *.msixbundle, *.appx, *.appxbundle
        foreach ($file in $msixFiles) {
          Write-Host "Found package: $($file.FullName)"
        }
      
    - name: Create manual deployment package
      run: |
        Write-Host "Creating manual deployment package..."
        # Create a directory for packaging
        New-Item -ItemType Directory -Force -Path "XboxDeployment" | Out-Null
        
        # Copy the built app (all bin contents)
        Copy-Item -Path "XboxMLApp/bin/ARM64/Release/net6.0-windows10.0.19041.0/*" -Destination "XboxDeployment" -Recurse -Force
        
        # Copy documentation and guidance
        Copy-Item -Path "XboxMLApp/WINDOWS_DEPLOYMENT_GUIDE.md" -Destination "XboxDeployment" -Force
        Copy-Item -Path "XboxMLApp/Models/MODEL_SETUP_GUIDE.md" -Destination "XboxDeployment" -Force
        Copy-Item -Path "XboxMLApp/TROUBLESHOOTING.md" -Destination "XboxDeployment" -Force
        
        # Copy AppXManifest.xml to the root for loose file deployment
        if (Test-Path "XboxMLApp/AppXManifest.xml") {
          Write-Host "Copying AppXManifest.xml for loose file deployment..."
          Copy-Item -Path "XboxMLApp/AppXManifest.xml" -Destination "XboxDeployment/AppxManifest.xml" -Force
        } else {
          Write-Host "Generating AppXManifest.xml for loose file deployment..."
          # Create a manifest file directly in the deployment package
          $manifestContent = @'
<?xml version="1.0" encoding="utf-8"?>
<Package
  xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
  xmlns:mp="http://schemas.microsoft.com/appx/2014/phone/manifest"
  xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
  xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
  IgnorableNamespaces="uap mp rescap">

  <Identity
    Name="XboxMLApp"
    Publisher="CN=DevelopmentUser"
    Version="1.0.0.0" />

  <mp:PhoneIdentity PhoneProductId="80918540-d3c4-1101-91cc-d91942353d3e" PhonePublisherId="00000000-0000-0000-0000-000000000000"/>

  <Properties>
    <DisplayName>Xbox DirectML Application</DisplayName>
    <PublisherDisplayName>DevelopmentUser</PublisherDisplayName>
    <Logo>Assets\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name="Windows.Universal" MinVersion="10.0.17763.0" MaxVersionTested="10.0.19041.0" />
    <TargetDeviceFamily Name="Windows.Xbox" MinVersion="10.0.19041.0" MaxVersionTested="10.0.19041.0" />
  </Dependencies>

  <Resources>
    <Resource Language="en-US" />
  </Resources>

  <Applications>
    <Application Id="App" Executable="XboxMLApp.exe" EntryPoint="XboxMLApp.App">
      <uap:VisualElements
        DisplayName="Xbox DirectML App"
        Description="DirectML machine learning inference on Xbox Series S/X"
        Square150x150Logo="Assets\Square150x150Logo.png"
        Square44x44Logo="Assets\Square44x44Logo.png"
        BackgroundColor="transparent">
        <uap:DefaultTile Wide310x150Logo="Assets\Wide310x150Logo.png" />
        <uap:SplashScreen Image="Assets\SplashScreen.png" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name="internetClient" />
    <rescap:Capability Name="broadFileSystemAccess" />
  </Capabilities>
</Package>
'@
          $manifestContent | Out-File -FilePath "XboxDeployment\AppxManifest.xml" -Encoding utf8
        }
        
        # Copy InstallDependencies script
        if (Test-Path "XboxMLApp/Scripts/InstallDependencies.ps1") {
          Write-Host "Copying InstallDependencies.ps1 script..."
          Copy-Item -Path "XboxMLApp/Scripts/InstallDependencies.ps1" -Destination "XboxDeployment" -Force
        }
        
        # Create a PowerShell deployment script
        $deployScript = @'
# Xbox DirectML App Deployment Script
# This script helps deploy the app to Xbox in Developer Mode

param(
    [Parameter(Mandatory=$true)]
    [string]$XboxIpAddress
)

Write-Host "Connecting to Xbox at $XboxIpAddress..."

# Try to install WDP tools if not present
if (-Not (Get-Command Connect-XboxConsole -ErrorAction SilentlyContinue)) {
    Write-Host "Xbox Device Portal PowerShell tools not found. Attempting to install..."
    Install-Module -Name XboxWDP -Force -Scope CurrentUser
}

# Connect to Xbox
try {
    Connect-XboxConsole -Address $XboxIpAddress
    Write-Host "Connected to Xbox successfully."
    
    # Copy the app to Xbox
    Write-Host "Copying app to Xbox..."
    Copy-Item -Path ".\*" -Destination "XboxOne:\DevelopmentFiles\HostApp" -Recurse -Force
    
    Write-Host "App copied successfully. Please go to the Xbox Device Portal in a browser at:"
    Write-Host "https://$XboxIpAddress"
    Write-Host "Then install the app from the 'Apps' section."
} catch {
    Write-Host "Error connecting to Xbox: $_"
    Write-Host "Make sure your Xbox is in Developer Mode and accessible on the network."
}
'@
        $deployScript | Out-File -FilePath "XboxDeployment\DeployToXbox.ps1" -Encoding utf8
        
        # Create a simplified readme
        $readmeContent = @'
# Xbox DirectML App Deployment Package

This package contains the Xbox DirectML application for deployment to Xbox Series S/X.

## Contents

- DirectML application binaries
- AppxManifest.xml (required for loose file deployment)
- Deployment guides
- Deployment PowerShell script

## Quick Start

1. Ensure your Xbox is in Developer Mode
2. Connect your Windows PC to the same network as your Xbox
3. From a Windows PC, run the PowerShell script:
   ```
   .\DeployToXbox.ps1 -XboxIpAddress 192.168.1.xxx
   ```
   (Replace with your Xbox's actual IP address)

4. If you encounter the error 0x800700d8, run:
   ```
   .\InstallDependencies.ps1 -XboxIpAddress 192.168.1.xxx
   ```
   Then try installing the app again

For more detailed instructions, see the WINDOWS_DEPLOYMENT_GUIDE.md file.
'@
        $readmeContent | Out-File -FilePath "XboxDeployment\README.md" -Encoding utf8
        
        # Package everything into a zip file
        Compress-Archive -Path "XboxDeployment\*" -DestinationPath "XboxMLApp-Deployment.zip" -Force
      
    - name: Upload MSIX files (if found)
      run: |
        $msixFiles = Get-ChildItem -Path XboxMLApp -Recurse -Include *.msix, *.msixbundle, *.appx, *.appxbundle
        if ($msixFiles.Count -gt 0) {
          Write-Host "Found MSIX packages to upload"
          $msixDir = "msix-packages"
          New-Item -ItemType Directory -Force -Path $msixDir | Out-Null
          foreach ($file in $msixFiles) {
            Copy-Item -Path $file.FullName -Destination $msixDir
          }
        } else {
          Write-Host "No MSIX packages found"
          # Create a notice file
          New-Item -ItemType Directory -Force -Path "msix-packages" | Out-Null
          "No MSIX packages were generated during the build." | Out-File -FilePath "msix-packages\README.txt"
        }
      
    - name: Upload built application
      uses: actions/upload-artifact@v4
      with:
        name: XboxMLApp-Binaries
        path: XboxMLApp/bin/ARM64/Release/net6.0-windows10.0.19041.0/
        
    - name: Upload MSIX/APPX packages
      uses: actions/upload-artifact@v4
      with:
        name: XboxMLApp-MSIX-Packages
        path: msix-packages/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: XboxMLApp-Deployment
        path: XboxMLApp-Deployment.zip
        
    - name: Generate deployment instructions
      run: |
        $instructionsContent = @'
# Deployment Instructions

1. Download the "XboxMLApp-Deployment" package from the artifacts of this build
2. Extract the ZIP file on a Windows PC
3. Connect the Windows PC to the same network as your Xbox in Developer Mode
4. Run the included PowerShell script:
   ```
   .\DeployToXbox.ps1 -XboxIpAddress 192.168.1.xxx
   ```
   (Replace with your Xbox's actual IP address)

## Loose File Deployment

The package contains everything needed for loose file deployment:
- AppxManifest.xml in the root directory
- All necessary assets and binaries
- Installation scripts

If you encounter error 0x800700d8:
1. Run the InstallDependencies.ps1 script to install VCLibs
2. Restart your Xbox
3. Try deploying again

For detailed instructions, see the WINDOWS_DEPLOYMENT_GUIDE.md file included in the package.
'@
        $instructionsContent | Out-File -FilePath deployment-instructions.txt
      
    - name: Upload deployment instructions
      uses: actions/upload-artifact@v4
      with:
        name: Deployment-Instructions
        path: deployment-instructions.txt 